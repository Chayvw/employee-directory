{"version":3,"sources":["component.jsx/tableheader.jsx","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Tableheader","props","scope","Home","state","UserUrl","employeesArray","sort","filterEmployees","search","sortAge","employees","console","log","a","b","dob","age","setState","handleInputChange","e","target","name","value","handleSubmit","preventDefault","employeeFilter","searchTerm","toLowerCase","filter","includes","axios","get","then","response","data","results","picture","large","catch","err","className","onSubmit","this","type","class","placeholder","onChange","onClick","sortFunction","map","emp","item","key","src","alt","first","last","email","Component","App","exact","path","component","Random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5acc3cff.chunk.js","sourcesContent":["\nimport React from 'react';\n// import Random from \"../containers/Random\"\n\nconst Tableheader = (props) => {\n    return (\n        <thead>\n            <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\"></th>\n                <th scope=\"col\">First Name</th>\n                <th scope=\"col\">Last Name</th>\n                {/* <th scope=\"col\" onClick={props.sortFunction}>Last Name</th> */}\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Age</th>\n                \n            </tr>\n        </thead>\n    )}\n\n    export default Tableheader;\n\n   ","import React, { Component } from \"react\";\nimport axios from \"axios\"\nimport Tableheader from \"../component.jsx/tableheader\"\n\nclass Home extends Component {\n    state = {\n        UserUrl: \"\",\n        employeesArray: [],\n        sort: [],\n        filterEmployees: [],\n        search: \"\"\n    };\n    componentDidMount() {\n        axios\n            .get(\"https://randomuser.me/api/?results=50\")\n            .then((response) => {\n                console.log(response.data);\n                this.setState({\n                    UserUrl: response.data.results[0].picture.large,\n                    filterEmployees: response.data.results,\n                    employeesArray: response.data.results\n                })\n\n            })\n            .catch((err) => {\n                console.log(err);\n\n            });\n    }\n\n    sortAge = () => {\n\n        const employees = this.state.employeesArray;\n        console.log(employees)\n        const filterEmployees = employees.sort((a, b) => {\n            console.log(a.dob.age, b.dob.age);\n            return a.dob.age - b.dob.age\n        });\n\n\n        console.log(filterEmployees)\n        console.log(\"in the last name func\")\n        this.setState({\n            filterEmployees\n        })\n    }\n\n    handleInputChange = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value,\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.employeeFilter();\n    }\n    employeeFilter = () => {\n        const searchTerm = this.state.search.toLowerCase();\n        this.setState({\n           filterEmployees: this.state.filterEmployees.filter((employeesArray) =>\n                employeesArray.employees.name.toLowerCase().includes(searchTerm)\n            ),\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"row\">\n                                <div className=\"col-sm-8\">\n                                <div className=\"form-group\">\n\n                                    <input type=\"text\" class=\"form-control\" placeholder=\"Search by name\" name=\"search\" value={this.state.search} onChange={this.handleInputChange} />\n\n\n\n                                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                                </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-text-center\">\n                            {/* <button onClick={this.props.sortFunction} className=\"btn btn-primary\">Sort by last name</button> */}\n                            <button onClick={this.sortAge} className=\"btn btn-primary\">Sort by Age</button>\n                            <table className=\"table\">\n                                <Tableheader\n                                    sortFunction={this.sortAge}\n                                />\n\n                                <tbody>\n                                    {this.state.filterEmployees.map((emp, item) => (\n                                        <tr>\n                                            <th scope=\"row\">{item}</th>\n                                            <td><img key={item} src={emp.picture.large} alt=\"users\" /></td>\n                                            <td> {emp.name.first}</td>\n                                            <td> {emp.name.last}</td>\n                                            <td> {emp.email}</td>\n                                            <td> {emp.dob.age}</td>\n\n                                        </tr>\n\n                                    ))}\n                                </tbody>\n\n                            </table>\n                        </div>\n                    </div>\n                    </div>\n                    </div >\n                            \n                );\n            \n                                    }\n        }\n\nexport default Home;","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Random from \"./containers/Home\";\n\n// import NavBar from \"./component.jsx/NavBar\";\n\n\n\n\n\nfunction App() {\n  return (\n    <Router>\n      {/* <NavBar/> */}\n      <Route exact path=\"/\" component={Random}/>\n      {/* <Route exact path=\"/Email\" component={Email}/>\n      <Route exact path=\"/Gender\" component={Gender}/>\n      <Route exact path=\"/Location\" component={Location}/> */}\n        \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}